// MAIN CODE
console.log('(Digite "exit" para sair)')
console.log('\nTrabalho 1 de Lógica, por Tiago Moraes, 2018');
console.log('-------------------------------------------------------');

let exit = false;
while(!exit) {
  let readline = require('readline-sync'); //imports the read file module

  let fileName = readline.question("What's the file name?\n");
  console.log('\033c'); //cleans the terminal

  if (fileName != 'exit') {      
    console.log('-------------------------------------------------------')

    //starts counting runtime
    console.time('runtime');

    let input = readInput(fileName);
    let formula = readFormula(input);

    let arrExp = formula.expressions;
    let values = formula.values;
  }
}

// gets the input file name and returns an array with all the text lines on it
function readInput(fileName) {
  let fs = require("fs");
  let text  = fs.readFileSync('./Examples/' + fileName, "utf8").split('\n'); //  an array containing lines of text extracted from the file.
  return text;
}

function readFormula(text) {
  let result = { 'expressions': [], 'values': [] }
  text.shift(); // removes the first element of array
  result.expressions = readExpressions(text);
  result.values = readValues(text);
  return result;
}

function readExpressions(text) {
  let arrExpressions = [];
  for(let i = 0; i < text.length; i++) {
    arrExpressions[i] = ''; // initializes with an empty string
    for(let j = 0; j < text[i].length; j++) {
      if(text[i][j] !== ' ' && text[i][j] != 0 && text[i][j] != 1) { // if char is from expr
        arrExpressions[i] += text[i][j]; // concat the char
      }
    }
    arrExpressions[i] = arrExpressions[i].replace('{', '').replace('}', '').split(','); // replaces '{' and splits
  }
  return arrExpressions;
}

// gets the vlues array for each line
function readValues(text) {
  let arrValues = [];
  for(let i = 0; i < text.length; i++) {
    let value = [];
    for(let j = 0; j < text[i].length; j++) {
      if(text[i][j] !== ' ' && (text[i][j] == 0 || text[i][j] == 1)) {
        value.push(text[i][j]);
      }
    }
    arrValues.push(value);
  }
  return arrValues;
}

function isLetter(str) {
  let result = (str.length === 1) && (str.charCodeAt(0) >= 65 && str.charCodeAt(0) <= 90)
  return result;
}

// gets the most significative operator
function getMainOperation(exp) {
  let i = 1;
  let openPar = 0;
  let closePar = 0;

  while(i < exp.length - 1) {
    if(exp.charAt(i) === '(') {
      openPar++;
    } else if(exp.charAt(i) === ')') {
      closePar++;
    } else if(exp.charAt(i) === '~') {
      break;
    }

    i++;

    if(openPar === closePar) {
      break;
    }

  }

  return i;
}

//check if expression is valid
function isValid(exp) {
  if(exp.length === 1) { //base
    if(isLetter(exp)) {
      return true;
    } else {
      return false;
    }
  } else {
    let mainOp = getMainOperation(exp);

    if(exp.charAt(mainOp) == 'v') { //recursive cases
      return (isValid(exp.substring(1, mainOp)) && isValid(exp.substring(mainOp + 1, exp.length - 1)));
    } else if(exp.charAt(mainOp) == '>') {
      return (isValid(exp.substring(1, mainOp)) && isValid(exp.substring(mainOp + 1, exp.length - 1)));
    } else if(exp.charAt(mainOp) == '&') {
      return (isValid(exp.substring(1, mainOp)) && isValid(exp.substring(mainOp + 1, exp.length - 1)));
    } else if(exp.charAt(mainOp) == '~') {
      return (isValid(exp.substring(mainOp + 1, exp.length - 1)));
    } else {
      return false;
    }
  }
}

function joinSet(arrExp) {
  let result = '(';
  for(let i = 0; i < arrExp.length; i++) {
    if(isValid(arrExp[i])) {
      if(i === arrExp.length - 1) {
        result += arrExp[i];
      } else {
        result += (arrExp[i] + '&');
      }
    } else {
      return false;
    }
  }
  result += ')';
  return result;
}

function mapVariables(exp) {
  // atribuir valor a cada variável, colocando o valor que ela vai ter em um array
}

function solve(exp, arrVal) {
  if(isLetter(exp)) {
    //caso base
  } else {
    //4 casos recursivos
  }
}